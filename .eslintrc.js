module.exports = {
    root: true,
    plugins: ['@typescript-eslint', 'react', 'react-hooks', 'react-native', 'unused-imports', 'unicorn', 'import'],
    extends: [
        'plugin:@typescript-eslint/recommended',
        'plugin:import/typescript',
        'plugin:react/recommended',
        'eslint:recommended',
        'plugin:react/recommended',
        'plugin:react-hooks/recommended',
    ],
    ignorePatterns: ['*.js', 'lib', 'node_modules'],
    parser: '@typescript-eslint/parser',
    parserOptions: {
        project: true,
        tsconfigRootDir: __dirname,
        EXPERIMENTAL_useProjectService: true,
    },
    env: {
        'react-native/react-native': true,
    },
    settings: {
        react: {
            version: 'detect',
        },
        'import/ignore': ['react-native'],
        'import/resolver': {
            typescript: {},
        },
    },
    rules: {
        'object-shorthand': ['error', 'always'],
        curly: ['error', 'all'],
        'eol-last': 'error',
        'no-console': [
            'error',
            {
                allow: ['warn', 'error'],
            },
        ],
        'no-debugger': 'error',
        'no-multiple-empty-lines': [
            'error',
            {
                max: 1,
            },
        ],
        'no-shadow': 'off',
        'no-trailing-spaces': [
            'error',
            {
                skipBlankLines: true,
            },
        ],
        'no-unused-vars': 'off',
        'unused-imports/no-unused-imports': 'error',
        'unused-imports/no-unused-vars': [
            'warn',
            {
                vars: 'all',
                varsIgnorePattern: '^_',
                args: 'after-used',
                argsIgnorePattern: '^_',
            },
        ],
        'prefer-const': 'error',
        quotes: [
            'error',
            'single',
            {
                avoidEscape: true,
                allowTemplateLiterals: true,
            },
        ],
        'arrow-body-style': ['error', 'always'],
        semi: ['error', 'always'],
        'import/consistent-type-specifier-style': ['error', 'prefer-top-level'],
        'import/no-useless-path-segments': 'error',
        'import/extensions': ['error', 'never', { svg: 'always', json: 'always', ttf: 'always', otf: 'always' }],
        'import/newline-after-import': ['error'],
        'import/order': [
            'error',
            {
                groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],
                pathGroups: [
                    {
                        pattern: 'react+(|-native)',
                        group: 'external',
                        position: 'before',
                    },
                ],
                pathGroupsExcludedImportTypes: ['react'],
                'newlines-between': 'always',
                alphabetize: {
                    order: 'asc',
                    caseInsensitive: true,
                },
            },
        ],
        'react/display-name': 'off',
        'react/jsx-closing-bracket-location': 'error',
        'react/no-danger': 'off',
        'react/no-deprecated': 'off',
        'react-hooks/rules-of-hooks': 'error',
        'react-hooks/exhaustive-deps': 'off',
        'react/no-string-refs': 'error',
        'react/no-find-dom-node': 'error',
        'react/no-unescaped-entities': 'error',
        'react-native/split-platform-components': 'error',
        'jsx-quotes': ['error', 'prefer-double'],
        'react/boolean-prop-naming': 'error',
        'react/destructuring-assignment': 'error',
        'react/function-component-definition': ['error', { namedComponents: 'arrow-function' }],
        'react/hook-use-state': 'off',
        'react/jsx-boolean-value': 'error',
        'react/jsx-curly-brace-presence': ['error', { props: 'never', children: 'never' }],
        'react/jsx-equals-spacing': ['error', 'never'],
        'react/jsx-fragments': ['error', 'syntax'],
        'react/jsx-no-leaked-render': 'error',
        'react/jsx-no-useless-fragment': 'error',
        'react/self-closing-comp': 'error',
        'unicorn/no-array-for-each': 'error',
        'unicorn/prefer-string-replace-all': 'error',
        'unicorn/no-array-callback-reference': 'error',
        'unicorn/better-regex': 'error',
        'unicorn/prefer-optional-catch-binding': 'error',
        'unicorn/prefer-add-event-listener': 'error',
        'unicorn/no-lonely-if': 'error',
        'unicorn/consistent-destructuring': 'error',
        'unicorn/catch-error-name': 'error',
        'unicorn/prefer-array-find': 'error',
        'unicorn/prefer-logical-operator-over-ternary': 'error',
        'import/no-default-export': 'error',
        'prefer-template': 'error',
        eqeqeq: 'error',
        'func-style': 'error',
        'no-else-return': 'error',
        'no-param-reassign': 'error',
        '@typescript-eslint/no-unnecessary-condition': 'error',
        '@typescript-eslint/no-non-null-assertion': 'error',
        '@typescript-eslint/no-shadow': 'off',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/await-thenable': 'error',
        '@typescript-eslint/no-floating-promises': 'error',
        '@typescript-eslint/array-type': 'error',
        '@typescript-eslint/consistent-indexed-object-style': 'error',
        '@typescript-eslint/consistent-type-definitions': ['error', 'type'],
        '@typescript-eslint/no-inferrable-types': 'error',
        '@typescript-eslint/prefer-for-of': 'error',
        '@typescript-eslint/prefer-nullish-coalescing': 'error',
        '@typescript-eslint/prefer-optional-chain': 'error',
        '@typescript-eslint/prefer-string-starts-ends-with': 'error',
        '@typescript-eslint/switch-exhaustiveness-check': 'error',
        '@typescript-eslint/no-unused-vars': [
            'error',
            {
                argsIgnorePattern: '^_',
                varsIgnorePattern: '^_',
                caughtErrorsIgnorePattern: '^_',
            },
        ],
        '@typescript-eslint/no-var-requires': 'error',
        '@typescript-eslint/prefer-as-const': 'error',
        'require-await': 'off',
        '@typescript-eslint/require-await': 'error',
        '@typescript-eslint/consistent-type-exports': 'error',
        '@typescript-eslint/consistent-type-imports': 'error',
        'dot-notation': 'off',
        '@typescript-eslint/dot-notation': 'error',
        'react-native/no-single-element-style-arrays': 'error',
        'react-native/no-inline-styles': 'off',
        'react/no-array-index-key': 'off',
        'react/no-object-type-as-default-prop': 'error',
        'react/no-unused-prop-types': 'error',
    },
};
